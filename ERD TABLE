BEGIN;
	-- TABLES

-- Authors Table
CREATE TABLE IF NOT EXISTS public.author
(
    authorid INTEGER PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    yearborn INTEGER NOT NULL,
    yeardied INTEGER,
    CONSTRAINT chk_yearborn CHECK (yearborn >= 0)
);

-- Publishers Table
CREATE TABLE IF NOT EXISTS public.publisher
(
    publisherid INTEGER PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    city VARCHAR(100) NOT NULL,
    country VARCHAR(100) NOT NULL,
    telephone VARCHAR(20),
    yearfounded INTEGER NOT NULL
);

-- Books Table
CREATE TABLE IF NOT EXISTS public.book
(
    bookid INTEGER PRIMARY KEY,
    title VARCHAR(100) NOT NULL, 	
    publicationyear INTEGER NOT NULL,
    pages INTEGER NOT NULL,
    publisherid INTEGER REFERENCES public.publisher(publisherid) NOT NULL
);


-- Book Categories Table
CREATE TABLE IF NOT EXISTS public.category
(
    categoryid INTEGER PRIMARY KEY,
    categoryname VARCHAR(100) NOT NULL
);

-- Author-Book Relationships Table
CREATE TABLE IF NOT EXISTS public.authorbook
(
    authorbookid INTEGER PRIMARY KEY,
    authorid INTEGER REFERENCES public.author(authorid) NOT NULL,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL
);

-- Book-Category Relationships Table
CREATE TABLE IF NOT EXISTS public.bookcategory
(
    bookcategoryid INTEGER PRIMARY KEY,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL,
    categoryid INTEGER REFERENCES public.category(categoryid) NOT NULL
);

-- Customers Table
CREATE TABLE IF NOT EXISTS public.customer
(
    customerid INTEGER PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    street VARCHAR(100),
    city VARCHAR(100),
    state VARCHAR(100),
    country VARCHAR(100),
    email VARCHAR(100) UNIQUE NOT NULL,
    passwordhash VARCHAR(255) NOT NULL
);

-- User Accounts Table
CREATE TABLE IF NOT EXISTS public.useraccount
(
    userid INTEGER PRIMARY KEY,
    customerid INTEGER REFERENCES public.customer(customerid) NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    passwordhash VARCHAR(255) NOT NULL
);

-- Reviews Table
CREATE TABLE IF NOT EXISTS public.review
(
    reviewid INTEGER PRIMARY KEY,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL,
    userid INTEGER REFERENCES public.useraccount(userid) NOT NULL,
    rating INTEGER NOT NULL,
    comment TEXT,
    date DATE NOT NULL
);

-- Wishlist Table
CREATE TABLE IF NOT EXISTS public.wishlist
(
    wishlistid INTEGER PRIMARY KEY,
    userid INTEGER REFERENCES public.useraccount(userid) NOT NULL,
    datecreated DATE NOT NULL
);

-- Wishlist Items Table
CREATE TABLE IF NOT EXISTS public.wishlistitem
(
    wishlistitemid INTEGER PRIMARY KEY,
    wishlistid INTEGER REFERENCES public.wishlist(wishlistid) NOT NULL,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL,
    dateadded DATE NOT NULL
);

-- Book Tags Table
CREATE TABLE IF NOT EXISTS public.tag
(
    tagid INTEGER PRIMARY KEY,
    tagname VARCHAR(100) UNIQUE NOT NULL
);

-- Book-Tag Relationships Table
CREATE TABLE IF NOT EXISTS public.booktag
(
    booktagid INTEGER PRIMARY KEY,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL,
    tagid INTEGER REFERENCES public.tag(tagid) NOT NULL
);

-- User Activities Table
CREATE TABLE IF NOT EXISTS public.useractivity
(
    activityid INTEGER PRIMARY KEY,
    userid INTEGER REFERENCES public.useraccount(userid) NOT NULL,
    activitytype VARCHAR(100) NOT NULL,
    activitydate TIMESTAMP NOT NULL
);

-- User Following Table
CREATE TABLE IF NOT EXISTS public.userfollowing
(
    followingid INTEGER PRIMARY KEY,
    followerid INTEGER REFERENCES public.useraccount(userid) NOT NULL,
    followdate DATE NOT NULL
);

-- Notifications Table
CREATE TABLE IF NOT EXISTS public.notification
(
    notificationid INTEGER PRIMARY KEY,
    userid INTEGER REFERENCES public.useraccount(userid) NOT NULL,
    message TEXT NOT NULL,
    datecreated TIMESTAMP NOT NULL
);

-- Stock Table
CREATE TABLE IF NOT EXISTS public.stock
(
    stockid INTEGER PRIMARY KEY,
    bookid INTEGER REFERENCES public.book(bookid) NOT NULL,
    quantityavailable INTEGER NOT NULL
);

-- VIEWS

-- View for Books with their Authors
CREATE VIEW public.books_authors AS
SELECT b.bookid, b.title, a.name AS author
FROM public.book b
JOIN public.authorbook ab ON b.bookid = ab.bookid
JOIN public.author a ON ab.authorid = a.authorid;

-- View for Books with their Categories
CREATE VIEW public.books_categories AS
SELECT b.bookid, b.title, c.categoryname
FROM public.book b
JOIN public.bookcategory bc ON b.bookid = bc.bookid
JOIN public.category c ON bc.categoryid = c.categoryid;

-- View for Customer's Wishlist
CREATE VIEW public.customer_wishlist AS
SELECT ua.username, w.datecreated, b.title
FROM public.useraccount ua
JOIN public.wishlist w ON ua.userid = w.userid
JOIN public.wishlistitem wi ON w.wishlistid = wi.wishlistid
JOIN public.book b ON wi.bookid = b.bookid;

-- View for Customer's Reviews
CREATE VIEW public.customer_reviews AS
SELECT ua.username, b.title, r.rating, r.comment, r.date
FROM public.useraccount ua
JOIN public.review r ON ua.userid = r.userid
JOIN public.book b ON r.bookid = b.bookid;

-- FOREIGN KEYS
-- Foreign keys have already been defined within the table creation statements

-- END
END;
