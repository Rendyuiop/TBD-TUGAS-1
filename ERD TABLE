BEGIN;


CREATE TABLE IF NOT EXISTS public.author
(
    authorid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    yearborn integer,
    yeardied integer,
    CONSTRAINT author_pkey PRIMARY KEY (authorid)
);

CREATE TABLE IF NOT EXISTS public.authorbook
(
    authorbookid integer NOT NULL,
    authorid integer,
    bookid integer,
    CONSTRAINT authorbook_pkey PRIMARY KEY (authorbookid)
);

CREATE TABLE IF NOT EXISTS public.book
(
    bookid integer NOT NULL,
    title character varying(100) COLLATE pg_catalog."default",
    publicationyear integer,
    pages integer,
    publisherid integer,
    CONSTRAINT book_pkey PRIMARY KEY (bookid)
);

CREATE TABLE IF NOT EXISTS public.bookcategory
(
    bookcategoryid integer NOT NULL,
    bookid integer,
    categoryid integer,
    CONSTRAINT bookcategory_pkey PRIMARY KEY (bookcategoryid)
);

CREATE TABLE IF NOT EXISTS public.bought
(
    boughtid integer NOT NULL,
    customerid integer,
    bookid integer,
    date date,
    price numeric(10, 2),
    quantity integer,
    CONSTRAINT bought_pkey PRIMARY KEY (boughtid)
);

CREATE TABLE IF NOT EXISTS public.category
(
    categoryid integer NOT NULL,
    categoryname character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT category_pkey PRIMARY KEY (categoryid)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    customerid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    street character varying(100) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    state character varying(100) COLLATE pg_catalog."default",
    country character varying(100) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    passwordhash character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT customer_pkey PRIMARY KEY (customerid)
);

CREATE TABLE IF NOT EXISTS public.orderhistory
(
    orderhistoryid integer NOT NULL,
    userid integer,
    bookid integer,
    orderdate date,
    status character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT orderhistory_pkey PRIMARY KEY (orderhistoryid)
);

CREATE TABLE IF NOT EXISTS public.paymentmethod
(
    paymentmethodid integer NOT NULL,
    userid integer,
    methodtype character varying(50) COLLATE pg_catalog."default",
    provider character varying(50) COLLATE pg_catalog."default",
    accountnumber character varying(50) COLLATE pg_catalog."default",
    expirydate date,
    CONSTRAINT paymentmethod_pkey PRIMARY KEY (paymentmethodid)
);

CREATE TABLE IF NOT EXISTS public.publisher
(
    publisherid integer NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    city character varying(100) COLLATE pg_catalog."default",
    country character varying(100) COLLATE pg_catalog."default",
    telephone character varying(20) COLLATE pg_catalog."default",
    yearfounded integer,
    CONSTRAINT publisher_pkey PRIMARY KEY (publisherid)
);

CREATE TABLE IF NOT EXISTS public.review
(
    reviewid integer NOT NULL,
    bookid integer,
    userid integer,
    rating integer,
    comment text COLLATE pg_catalog."default",
    date date,
    CONSTRAINT review_pkey PRIMARY KEY (reviewid)
);

CREATE TABLE IF NOT EXISTS public.stock
(
    stockid integer NOT NULL,
    bookid integer,
    quantityavailable integer,
    CONSTRAINT stock_pkey PRIMARY KEY (stockid)
);

CREATE TABLE IF NOT EXISTS public.useraccount
(
    userid integer NOT NULL,
    customerid integer,
    username character varying(50) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    passwordhash character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT useraccount_pkey PRIMARY KEY (userid)
);

CREATE TABLE IF NOT EXISTS public.wishlist
(
    wishlistid integer NOT NULL,
    userid integer,
    datecreated date,
    CONSTRAINT wishlist_pkey PRIMARY KEY (wishlistid)
);

CREATE TABLE IF NOT EXISTS public.wishlistitem
(
    wishlistitemid integer NOT NULL,
    wishlistid integer,
    bookid integer,
    dateadded date,
    CONSTRAINT wishlistitem_pkey PRIMARY KEY (wishlistitemid)
);

ALTER TABLE IF EXISTS public.authorbook
    ADD CONSTRAINT authorbook_authorid_fkey FOREIGN KEY (authorid)
    REFERENCES public.author (authorid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.authorbook
    ADD CONSTRAINT authorbook_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book
    ADD CONSTRAINT book_publisherid_fkey FOREIGN KEY (publisherid)
    REFERENCES public.publisher (publisherid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.bookcategory
    ADD CONSTRAINT bookcategory_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.bookcategory
    ADD CONSTRAINT bookcategory_categoryid_fkey FOREIGN KEY (categoryid)
    REFERENCES public.category (categoryid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.bought
    ADD CONSTRAINT bought_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.bought
    ADD CONSTRAINT bought_customerid_fkey FOREIGN KEY (customerid)
    REFERENCES public.customer (customerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orderhistory
    ADD CONSTRAINT orderhistory_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.orderhistory
    ADD CONSTRAINT orderhistory_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.useraccount (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.paymentmethod
    ADD CONSTRAINT paymentmethod_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.useraccount (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT review_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT review_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.useraccount (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.stock
    ADD CONSTRAINT stock_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.useraccount
    ADD CONSTRAINT useraccount_customerid_fkey FOREIGN KEY (customerid)
    REFERENCES public.customer (customerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT wishlist_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.useraccount (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wishlistitem
    ADD CONSTRAINT wishlistitem_bookid_fkey FOREIGN KEY (bookid)
    REFERENCES public.book (bookid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wishlistitem
    ADD CONSTRAINT wishlistitem_wishlistid_fkey FOREIGN KEY (wishlistid)
    REFERENCES public.wishlist (wishlistid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;

